name: PR Checks

on:
  pull_request:
    branches: [main]

jobs:
  conventional-commits:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check conventional commits
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf

            chore
            ci
            build
            revert

  documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Check documentation links
        run: |
          # Check for broken links in markdown files
          find docs/ -name "*.md" -exec grep -l "http" {} \; | xargs -I {} grep -o 'http[^ ]*' {} | while read url; do
            if ! curl --output /dev/null --silent --head --fail "$url"; then
              echo "Broken link found: $url"
              exit 1
            fi
          done || true

      - name: Validate YAML files
        run: |
          # Check if all YAML files are valid
          find . -name "*.yml" -o -name "*.yaml" | xargs -I {} python -c "import yaml; yaml.safe_load(open('{}'))"

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Check for outdated dependencies
        run: |
          pip list --outdated --format=freeze | grep -v "^-e" || echo "All dependencies are up to date"

      - name: Check for security vulnerabilities
        run: |
          pip-audit --format json --output pip-audit-report.json || true
          if [ -f pip-audit-report.json ]; then
            echo "Security vulnerabilities found:"
            cat pip-audit-report.json
          else
            echo "No security vulnerabilities found"
          fi
